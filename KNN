import pandas as pd
from sklearn import preprocessing
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import KFold,cross_val_score,train_test_split,LeaveOneOut


veriler = pd.read_csv('ReplicatedAcousticFeatures-ParkinsonDatabase.csv')


minmax_scale = preprocessing.MinMaxScaler().fit(veriler.iloc[:,3:48])
df_minmax = minmax_scale.transform(veriler.iloc[:,3:48])

 
x=df_minmax
y=veriler.iloc[:,2]

Y=y.values 
"X=x.values"

x_train, x_test,y_train,y_test = train_test_split(x,Y,test_size=0.33, random_state=0)
acc_score = []

#En yakın komşu algoritması(1 neighbors)
from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=1, metric='minkowski')
knn.fit(x_train,y_train)

y_pred = knn.predict(x_test)

cm = confusion_matrix(y_test,y_pred)
accuracy = metrics.accuracy_score(y_test, y_pred)
print("K-NN-1")
print(cm)
print(accuracy)

scores=cross_val_score(knn,x,y,cv=5)
print(scores)

print(scores.mean())

kfold=KFold(n_splits=3,shuffle=True,random_state=0)
print(cross_val_score(knn,x,y,cv=kfold))

loo=LeaveOneOut()
scores=cross_val_score(knn,x,y,cv=loo)
print(scores.mean())

#En yakın komşu algoritması(3 neighbors)
from sklearn.neighbors import KNeighborsClassifier

knn3 = KNeighborsClassifier(n_neighbors=3, metric='minkowski')
knn.fit(x_train,y_train)

y_pred = knn.predict(x_test)

cm = confusion_matrix(y_test,y_pred)
accuracy = metrics.accuracy_score(y_test, y_pred)
print("K-NN-3")
print(cm)
print(accuracy)

scores=cross_val_score(knn3,x,y,cv=5)
print(scores)

print(scores.mean())

kfold=KFold(n_splits=3,shuffle=True,random_state=0)
print(cross_val_score(knn3,x,y,cv=kfold))

loo=LeaveOneOut()
scores=cross_val_score(knn3,x,y,cv=loo)
print(scores.mean())

#En yakın komşu algoritması(5 neighbors)
from sklearn.neighbors import KNeighborsClassifier

knn5 = KNeighborsClassifier(n_neighbors=5, metric='minkowski')
knn.fit(x_train,y_train)

y_pred = knn.predict(x_test)

cm = confusion_matrix(y_test,y_pred)
accuracy = metrics.accuracy_score(y_test, y_pred)
print("K-NN-5")
print(cm)
print(accuracy)


scores=cross_val_score(knn5,x,y,cv=5)
print(scores)

print(scores.mean())

kfold=KFold(n_splits=3,shuffle=True,random_state=0)
print(cross_val_score(knn5,x,y,cv=kfold))

loo=LeaveOneOut()
scores=cross_val_score(knn5,x,y,cv=loo)
print(scores.mean())
